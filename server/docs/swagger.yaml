definitions:
  model.ActivityResult:
    properties:
      business_status:
        type: string
      geometry:
        $ref: '#/definitions/model.GeometryActivity'
      icon:
        type: string
      icon_background_color:
        type: string
      icon_mask_base_uri:
        type: string
      name:
        type: string
      opening_hours:
        $ref: '#/definitions/model.OpeningHours'
      photos:
        items:
          $ref: '#/definitions/model.Photos'
        type: array
      place_id:
        type: string
      plus_code:
        $ref: '#/definitions/model.PlusCode'
      price_level:
        type: integer
      rating:
        type: number
      reference:
        type: string
      scope:
        type: string
      types:
        items:
          type: string
        type: array
      user_ratings_total:
        type: integer
      vicinity:
        type: string
    type: object
  model.AppResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
      valErrors:
        items:
          $ref: '#/definitions/model.ValError'
        type: array
    type: object
  model.Bounds:
    properties:
      northeast:
        $ref: '#/definitions/model.Location'
      southwest:
        $ref: '#/definitions/model.Location'
    type: object
  model.CityFormData:
    properties:
      city:
        type: string
      constraints:
        $ref: '#/definitions/model.Constraints'
    required:
    - city
    type: object
  model.Constraints:
    properties:
      maxprice:
        type: integer
      minprice:
        type: integer
      opennow:
        type: boolean
      radius:
        type: integer
    type: object
  model.CreateRoadtripSuccess:
    properties:
      data:
        type: object
      message:
        example: Added roadtrip to user {id} successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.DeleteRoadtripSuccess:
    properties:
      data:
        type: object
      message:
        example: Removed roadtrip from user {id} successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.DeleteUserSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        example: User deleted successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.DirectionsFormData:
    properties:
      departureTime:
        type: string
      destination:
        type: string
      origin:
        type: string
    type: object
  model.Drink:
    properties:
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
      vicinity:
        type: string
    type: object
  model.DrinkSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ActivityResult'
        type: array
      message:
        example: Bars retrieved successfuly
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.Eat:
    properties:
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
      vicinity:
        type: string
    type: object
  model.EatSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ActivityResult'
        type: array
      message:
        example: Restaurants retrieved successfuly
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.Enjoy:
    properties:
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
      vicinity:
        type: string
    type: object
  model.EnjoySuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ActivityResult'
        type: array
      message:
        example: Activities retrieved successfuly
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.FlightFormData:
    properties:
      adults:
        type: integer
      departureDate:
        type: string
      destinationLocation:
        type: string
      maxPrice:
        type: integer
      originLocation:
        type: string
    required:
    - adults
    - departureDate
    - destinationLocation
    - originLocation
    type: object
  model.FlightOfferNotFound:
    properties:
      data:
        type: object
      message:
        example: flight offers/airport not found for origin/destination cities
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.GeometryActivity:
    properties:
      location:
        $ref: '#/definitions/model.Location'
      viewport:
        $ref: '#/definitions/model.Bounds'
    type: object
  model.GetAllUserSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        example: Users retrieved successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.GetUserByIDSuccess:
    properties:
      data:
        $ref: '#/definitions/model.User'
      message:
        example: User <id> retrieved successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.GoogleNotFound:
    properties:
      data:
        type: object
      message:
        example: ZERO RESULTS
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.InternalServerError:
    properties:
      data:
        type: object
      message:
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.InvalidID:
    properties:
      data:
        type: object
      message:
        example: invalid id
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.InvalidJsonBody:
    properties:
      data:
        type: object
      message:
        example: invalid json request body
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          $ref: '#/definitions/model.ValError'
        type: array
    type: object
  model.Itinerary:
    properties:
      arrival:
        $ref: '#/definitions/model.Station'
      departure:
        $ref: '#/definitions/model.Station'
      duration:
        type: string
      enddate:
        type: string
      price:
        type: number
      startdate:
        type: string
      steps:
        items:
          $ref: '#/definitions/model.ItineraryStep'
        type: array
      type:
        type: string
    type: object
  model.ItineraryStep:
    properties:
      arrival:
        type: string
      departure:
        type: string
      duration:
        type: string
      enddate:
        type: string
      startdate:
        type: string
      type:
        type: string
    type: object
  model.Location:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  model.LoginFailureCredentials:
    properties:
      data:
        type: object
      message:
        example: incorrect/missing email or password
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.LoginRequest:
    properties:
      email:
        example: yoimiya.naganohara@gmail.com
        type: string
      password:
        example: "12345678"
        type: string
    required:
    - email
    - password
    type: object
  model.LoginSuccess:
    properties:
      data:
        type: object
      message:
        example: Login successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.LogoutSuccess:
    properties:
      data:
        type: object
      message:
        example: Logout successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.OpeningHours:
    properties:
      open_now:
        type: boolean
    type: object
  model.Photos:
    properties:
      height:
        type: integer
      html_attributions:
        items:
          type: string
        type: array
      photo_reference:
        type: string
      width:
        type: integer
    type: object
  model.PlusCode:
    properties:
      compound_code:
        type: string
      global_code:
        type: string
    type: object
  model.RefreshSuccess:
    properties:
      data:
        type: object
      message:
        example: Token refreshed successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.RegisterRequest:
    properties:
      email:
        example: yoimiya.naganohara@gmail.com
        type: string
      firstname:
        example: yoimiya
        maxLength: 50
        minLength: 2
        type: string
      lastname:
        example: naganohara
        maxLength: 50
        minLength: 2
        type: string
      password:
        example: "12345678"
        maxLength: 100
        minLength: 8
        type: string
      phone:
        example: "+33612345678"
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - phone
    type: object
  model.RegisterSuccess:
    properties:
      data:
        type: object
      message:
        example: User created successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.Roadtrip:
    properties:
      enddate:
        type: string
      id:
        type: string
      startdate:
        type: string
      tripSteps:
        items:
          $ref: '#/definitions/model.TripStep'
        type: array
    type: object
  model.Sleep:
    properties:
      id:
        type: integer
      name:
        type: string
      rating:
        type: number
      vicinity:
        type: string
    type: object
  model.SleepSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.ActivityResult'
        type: array
      message:
        example: Hotels retrieved successfuly
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.Station:
    properties:
      city:
        type: string
      country:
        type: string
      name:
        type: string
    type: object
  model.TravelSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Itinerary'
        type: array
      message:
        example: Itineraries retrieved successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.TripStep:
    properties:
      city:
        type: string
      drink:
        items:
          $ref: '#/definitions/model.Drink'
        type: array
      eat:
        items:
          $ref: '#/definitions/model.Eat'
        type: array
      enddate:
        type: string
      enjoy:
        items:
          $ref: '#/definitions/model.Enjoy'
        type: array
      sleep:
        items:
          $ref: '#/definitions/model.Sleep'
        type: array
      startdate:
        type: string
      travel:
        $ref: '#/definitions/model.Itinerary'
    required:
    - city
    - enddate
    - startdate
    type: object
  model.Unauthorized:
    properties:
      data:
        type: object
      message:
        example: cookie token is empty / Token is expired
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.UpdateUserRequest:
    properties:
      email:
        example: yoimiya.naganohara@gmail.com
        type: string
      firstname:
        example: yoimiya
        maxLength: 50
        minLength: 2
        type: string
      lastname:
        example: naganohara
        maxLength: 50
        minLength: 2
        type: string
      phone:
        example: "+33612345678"
        type: string
    required:
    - email
    - firstname
    - lastname
    - phone
    type: object
  model.UpdateUserSuccess:
    properties:
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        example: User updated successfully
        type: string
      success:
        example: true
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.User:
    properties:
      email:
        type: string
      firstname:
        maxLength: 50
        minLength: 2
        type: string
      id:
        type: string
      lastname:
        maxLength: 50
        minLength: 2
        type: string
      phone:
        type: string
      trips:
        items:
          $ref: '#/definitions/model.Roadtrip'
        type: array
    required:
    - email
    - firstname
    - lastname
    - phone
    type: object
  model.UserNotFound:
    properties:
      data:
        type: object
      message:
        example: user not found
        type: string
      success:
        example: false
        type: boolean
      valErrors:
        items:
          type: object
        type: array
    type: object
  model.ValError:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - application/json
      description: allows healthcheck
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.AppResponse'
      summary: healthcheck
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user given valid email and password
      parameters:
      - description: email & password
        in: body
        name: userLogin
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.LoginSuccess'
        "401":
          description: Missing/Incorrect credentials
          schema:
            $ref: '#/definitions/model.LoginFailureCredentials'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user by removing jwt cookie
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.LogoutSuccess'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Logout
      tags:
      - Auth
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      description: Refresh user's access token given valid refresh token
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.RefreshSuccess'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Refresh
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user given valid firstname, lastname, email (unique),
        password, phone (unique)
      parameters:
      - description: firstname, lastname, email, password, phone
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.RegisterSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Register
      tags:
      - Auth
  /roadtrip:
    post:
      consumes:
      - application/json
      description: Add roadtrip to the user given userID & trip steps
      parameters:
      - description: User ID
        in: query
        name: userID
        required: true
        type: string
      - description: city & start/end date & activities
        in: body
        name: tripSteps
        required: true
        schema:
          items:
            $ref: '#/definitions/model.TripStep'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.CreateRoadtripSuccess'
        "400":
          description: Invalid request params/body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Create roadtrip
      tags:
      - Roadtrip
  /roadtrip/:id:
    delete:
      consumes:
      - application/json
      description: Remove roadtrip from the user given userID & roadtrip ID
      parameters:
      - description: User ID
        in: query
        name: userID
        required: true
        type: string
      - description: Roadtrip ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.DeleteRoadtripSuccess'
        "400":
          description: Invalid ID/params
          schema:
            $ref: '#/definitions/model.InvalidID'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.UserNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Delete roadtrip
      tags:
      - Roadtrip
  /roadtrip/drink:
    post:
      consumes:
      - application/json
      description: Search for bars around the given city & constraints
      parameters:
      - description: city & constraints
        in: body
        name: cityFormData
        required: true
        schema:
          $ref: '#/definitions/model.CityFormData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.DrinkSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: Zero results
          schema:
            $ref: '#/definitions/model.GoogleNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Drink
      tags:
      - Roadtrip
  /roadtrip/eat:
    post:
      consumes:
      - application/json
      description: Search for restaurants around the given city & constraints
      parameters:
      - description: city & constraints
        in: body
        name: cityFormData
        required: true
        schema:
          $ref: '#/definitions/model.CityFormData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.EatSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: Zero results
          schema:
            $ref: '#/definitions/model.GoogleNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Eat
      tags:
      - Roadtrip
  /roadtrip/enjoy:
    post:
      consumes:
      - application/json
      description: Search for tourist attraction around the given city & constraints
      parameters:
      - description: city & constraints
        in: body
        name: cityFormData
        required: true
        schema:
          $ref: '#/definitions/model.CityFormData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.EnjoySuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: Zero results
          schema:
            $ref: '#/definitions/model.GoogleNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Enjoy
      tags:
      - Roadtrip
  /roadtrip/sleep:
    post:
      consumes:
      - application/json
      description: Search for hotels around the given city & constraints
      parameters:
      - description: city & constraints
        in: body
        name: cityFormData
        required: true
        schema:
          $ref: '#/definitions/model.CityFormData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.SleepSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: Zero results
          schema:
            $ref: '#/definitions/model.GoogleNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Sleep
      tags:
      - Roadtrip
  /roadtrip/travel/air:
    post:
      consumes:
      - application/json
      description: Search for flight offers given a valid origin & destination
      parameters:
      - description: origin, destination, departure date, adults, max price
        in: body
        name: flightFormData
        required: true
        schema:
          $ref: '#/definitions/model.FlightFormData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.TravelSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: Flight offers not found
          schema:
            $ref: '#/definitions/model.FlightOfferNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Travel air
      tags:
      - Roadtrip
  /roadtrip/travel/ground:
    post:
      consumes:
      - application/json
      description: Search for train/bus directions given a valid origin & destination
      parameters:
      - description: origin, destination, departure date
        in: body
        name: directionsFormData
        required: true
        schema:
          $ref: '#/definitions/model.DirectionsFormData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.TravelSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: Zero results
          schema:
            $ref: '#/definitions/model.GoogleNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Travel ground
      tags:
      - Roadtrip
  /user:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.GetAllUserSuccess'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create user user given valid firstname, lastname, email (unique),
        password, phone (unique)
      parameters:
      - description: firstname, lastname, email, password, phone
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.RegisterSuccess'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Create user
      tags:
      - User
  /user/:id:
    delete:
      consumes:
      - application/json
      description: Delete user user given valid ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.DeleteUserSuccess'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.InvalidID'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.UserNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Delete user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user given a valid ID
      parameters:
      - description: Populate the user's roadtrips or not
        in: query
        name: populate
        type: boolean
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.GetUserByIDSuccess'
        "400":
          description: Invalid ID
          schema:
            $ref: '#/definitions/model.InvalidID'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.UserNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update user user given valid ID, firstname, lastname, email (unique),
        phone (unique)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: firstname, lastname, email, phone
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/model.UpdateUserSuccess'
        "400":
          description: Invalid ID/body
          schema:
            $ref: '#/definitions/model.InvalidJsonBody'
        "401":
          description: Missing/Expired token
          schema:
            $ref: '#/definitions/model.Unauthorized'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/model.UserNotFound'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.InternalServerError'
      summary: Update user
      tags:
      - User
swagger: "2.0"
