// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	model "github.com/alexandre-pinon/epic-road-trip/model"
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	testing "testing"
)

// TripStepRepository is an autogenerated mock type for the TripStepRepository type
type TripStepRepository struct {
	mock.Mock
}

// CreateTripStep provides a mock function with given fields: tripStep
func (_m *TripStepRepository) CreateTripStep(tripStep *model.TripStep) (*mongo.InsertOneResult, error) {
	ret := _m.Called(tripStep)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(*model.TripStep) *mongo.InsertOneResult); ok {
		r0 = rf(tripStep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.TripStep) error); ok {
		r1 = rf(tripStep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTripStep provides a mock function with given fields: id
func (_m *TripStepRepository) DeleteTripStep(id primitive.ObjectID) (*mongo.DeleteResult, error) {
	ret := _m.Called(id)

	var r0 *mongo.DeleteResult
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *mongo.DeleteResult); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTripSteps provides a mock function with given fields:
func (_m *TripStepRepository) GetAllTripSteps() (*[]model.TripStep, error) {
	ret := _m.Called()

	var r0 *[]model.TripStep
	if rf, ok := ret.Get(0).(func() *[]model.TripStep); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.TripStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTripStepByID provides a mock function with given fields: id
func (_m *TripStepRepository) GetTripStepByID(id primitive.ObjectID) (*model.TripStep, error) {
	ret := _m.Called(id)

	var r0 *model.TripStep
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *model.TripStep); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TripStep)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTripStepRepository creates a new instance of TripStepRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewTripStepRepository(t testing.TB) *TripStepRepository {
	mock := &TripStepRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
