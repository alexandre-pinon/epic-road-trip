// Generated by kea-typegen on Fri, 20 May 2022 08:54:56 GMT. DO NOT EDIT THIS FILE MANUALLY.

import { Logic } from 'kea'

export interface logicType extends Logic {
    actionCreators: {
        setUsername: (username: any) => ({
            type: "set username (src\\components\\Home\\Home\\Home)";
            payload: {
                username: any;
            };
        });
        setRepositories: (repositories: any) => ({
            type: "set repositories (src\\components\\Home\\Home\\Home)";
            payload: {
                repositories: any;
            };
        });
        setFetchError: (error: any) => ({
            type: "set fetch error (src\\components\\Home\\Home\\Home)";
            payload: {
                error: any;
            };
        });
    };
    actionKeys: {
        "set username (src\\components\\Home\\Home\\Home)": "setUsername";
        "set repositories (src\\components\\Home\\Home\\Home)": "setRepositories";
        "set fetch error (src\\components\\Home\\Home\\Home)": "setFetchError";
    };
    actionTypes: {
        setUsername: "set username (src\\components\\Home\\Home\\Home)";
        setRepositories: "set repositories (src\\components\\Home\\Home\\Home)";
        setFetchError: "set fetch error (src\\components\\Home\\Home\\Home)";
    };
    actions: {
        setUsername: (username: any) => void;
        setRepositories: (repositories: any) => void;
        setFetchError: (error: any) => void;
    };
    defaults: {
        username: string;
        repositories: any[];
        isLoading: boolean;
        error: null;
    };
    events: {};
    key: undefined;
    listeners: {
        "setUsername": ((action: {
            type: "set username (src\\components\\Home\\Home\\Home)";
            payload: {
                username: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src\\components\\Home\\Home\\Home"
    ];
    pathString: "src\\components\\Home\\Home\\Home";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        username: string;
        repositories: any[];
        isLoading: boolean;
        error: null;
    };
    reducers: {
        username: (state: string, action: any, fullState: any) => string;
        repositories: (state: any[], action: any, fullState: any) => any[];
        isLoading: (state: boolean, action: any, fullState: any) => boolean;
        error: (state: null, action: any, fullState: any) => null;
    };
    selector: (state: any) => {
        username: string;
        repositories: any[];
        isLoading: boolean;
        error: null;
    };
    selectors: {
        username: (state: any, props?: any) => string;
        repositories: (state: any, props?: any) => any[];
        isLoading: (state: any, props?: any) => boolean;
        error: (state: any, props?: any) => null;
        sortedRepositories: (state: any, props?: any) => any[];
    };
    sharedListeners: {};
    values: {
        username: string;
        repositories: any[];
        isLoading: boolean;
        error: null;
        sortedRepositories: any[];
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        sortedRepositories: (repositories: any[]) => any[];
    };
}