{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/": {
            "get": {
                "description": "allows healthcheck",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "healthcheck",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.AppResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login user given valid email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "email \u0026 password",
                        "name": "userLogin",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.LoginSuccess"
                        }
                    },
                    "401": {
                        "description": "Missing/Incorrect credentials",
                        "schema": {
                            "$ref": "#/definitions/model.LoginFailureCredentials"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Logout user by removing jwt cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.LogoutSuccess"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/auth/refresh_token": {
            "post": {
                "description": "Refresh user's access token given valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.RefreshSuccess"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register user given valid firstname, lastname, email (unique), password, phone (unique)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "description": "firstname, lastname, email, password, phone",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip": {
            "post": {
                "description": "Add roadtrip to the user given userID \u0026 trip steps",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Create roadtrip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "city \u0026 start/end date \u0026 activities",
                        "name": "tripSteps",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.TripStep"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.CreateRoadtripSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request params/body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/:id": {
            "delete": {
                "description": "Remove roadtrip from the user given userID \u0026 roadtrip ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Delete roadtrip",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Roadtrip ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteRoadtripSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid ID/params",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidID"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.UserNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/drink": {
            "post": {
                "description": "Search for bars around the given city \u0026 constraints",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Drink",
                "parameters": [
                    {
                        "description": "city \u0026 constraints",
                        "name": "cityFormData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CityFormData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.DrinkSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Zero results",
                        "schema": {
                            "$ref": "#/definitions/model.GoogleNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/eat": {
            "post": {
                "description": "Search for restaurants around the given city \u0026 constraints",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Eat",
                "parameters": [
                    {
                        "description": "city \u0026 constraints",
                        "name": "cityFormData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CityFormData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.EatSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Zero results",
                        "schema": {
                            "$ref": "#/definitions/model.GoogleNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/enjoy": {
            "post": {
                "description": "Search for tourist attraction around the given city \u0026 constraints",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Enjoy",
                "parameters": [
                    {
                        "description": "city \u0026 constraints",
                        "name": "cityFormData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CityFormData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.EnjoySuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Zero results",
                        "schema": {
                            "$ref": "#/definitions/model.GoogleNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/sleep": {
            "post": {
                "description": "Search for hotels around the given city \u0026 constraints",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Sleep",
                "parameters": [
                    {
                        "description": "city \u0026 constraints",
                        "name": "cityFormData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CityFormData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.SleepSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Zero results",
                        "schema": {
                            "$ref": "#/definitions/model.GoogleNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/travel/air": {
            "post": {
                "description": "Search for flight offers given a valid origin \u0026 destination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Travel air",
                "parameters": [
                    {
                        "description": "origin, destination, departure date, adults, max price",
                        "name": "flightFormData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FlightFormData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.TravelSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Flight offers not found",
                        "schema": {
                            "$ref": "#/definitions/model.FlightOfferNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/roadtrip/travel/ground": {
            "post": {
                "description": "Search for train/bus directions given a valid origin \u0026 destination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roadtrip"
                ],
                "summary": "Travel ground",
                "parameters": [
                    {
                        "description": "origin, destination, departure date",
                        "name": "directionsFormData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.DirectionsFormData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.TravelSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "Zero results",
                        "schema": {
                            "$ref": "#/definitions/model.GoogleNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "Get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.GetAllUserSuccess"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create user user given valid firstname, lastname, email (unique), password, phone (unique)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "firstname, lastname, email, password, phone",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.RegisterSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        },
        "/user/:id": {
            "get": {
                "description": "Get user given a valid ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "Populate the user's roadtrips or not",
                        "name": "populate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.GetUserByIDSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidID"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.UserNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update user user given valid ID, firstname, lastname, email (unique), phone (unique)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "firstname, lastname, email, phone",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.UpdateUserSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid ID/body",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidJsonBody"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.UserNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete user user given valid ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/model.DeleteUserSuccess"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/model.InvalidID"
                        }
                    },
                    "401": {
                        "description": "Missing/Expired token",
                        "schema": {
                            "$ref": "#/definitions/model.Unauthorized"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/model.UserNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.InternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.ActivityResult": {
            "type": "object",
            "properties": {
                "business_status": {
                    "type": "string"
                },
                "geometry": {
                    "$ref": "#/definitions/model.GeometryActivity"
                },
                "icon": {
                    "type": "string"
                },
                "icon_background_color": {
                    "type": "string"
                },
                "icon_mask_base_uri": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "opening_hours": {
                    "$ref": "#/definitions/model.OpeningHours"
                },
                "photos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Photos"
                    }
                },
                "place_id": {
                    "type": "string"
                },
                "plus_code": {
                    "$ref": "#/definitions/model.PlusCode"
                },
                "price_level": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number"
                },
                "reference": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user_ratings_total": {
                    "type": "integer"
                },
                "vicinity": {
                    "type": "string"
                }
            }
        },
        "model.AppResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ValError"
                    }
                }
            }
        },
        "model.Bounds": {
            "type": "object",
            "properties": {
                "northeast": {
                    "$ref": "#/definitions/model.Location"
                },
                "southwest": {
                    "$ref": "#/definitions/model.Location"
                }
            }
        },
        "model.CityFormData": {
            "type": "object",
            "required": [
                "city"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "constraints": {
                    "$ref": "#/definitions/model.Constraints"
                }
            }
        },
        "model.Constraints": {
            "type": "object",
            "properties": {
                "maxprice": {
                    "type": "integer"
                },
                "minprice": {
                    "type": "integer"
                },
                "opennow": {
                    "type": "boolean"
                },
                "radius": {
                    "type": "integer"
                }
            }
        },
        "model.CreateRoadtripSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Added roadtrip to user {id} successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.DeleteRoadtripSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Removed roadtrip from user {id} successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.DeleteUserSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User deleted successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.DirectionsFormData": {
            "type": "object",
            "properties": {
                "departureTime": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "origin": {
                    "type": "string"
                }
            }
        },
        "model.Drink": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "vicinity": {
                    "type": "string"
                }
            }
        },
        "model.DrinkSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ActivityResult"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Bars retrieved successfuly"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.Eat": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "vicinity": {
                    "type": "string"
                }
            }
        },
        "model.EatSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ActivityResult"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Restaurants retrieved successfuly"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.Enjoy": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "vicinity": {
                    "type": "string"
                }
            }
        },
        "model.EnjoySuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ActivityResult"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Activities retrieved successfuly"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.FlightFormData": {
            "type": "object",
            "required": [
                "adults",
                "departureDate",
                "destinationLocation",
                "originLocation"
            ],
            "properties": {
                "adults": {
                    "type": "integer"
                },
                "departureDate": {
                    "type": "string"
                },
                "destinationLocation": {
                    "type": "string"
                },
                "maxPrice": {
                    "type": "integer"
                },
                "originLocation": {
                    "type": "string"
                }
            }
        },
        "model.FlightOfferNotFound": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "flight offers/airport not found for origin/destination cities"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.GeometryActivity": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/model.Location"
                },
                "viewport": {
                    "$ref": "#/definitions/model.Bounds"
                }
            }
        },
        "model.GetAllUserSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Users retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.GetUserByIDSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/model.User"
                },
                "message": {
                    "type": "string",
                    "example": "User \u003cid\u003e retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.GoogleNotFound": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "ZERO RESULTS"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.InternalServerError": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.InvalidID": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "invalid id"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.InvalidJsonBody": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "invalid json request body"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ValError"
                    }
                }
            }
        },
        "model.Itinerary": {
            "type": "object",
            "properties": {
                "arrival": {
                    "$ref": "#/definitions/model.Station"
                },
                "departure": {
                    "$ref": "#/definitions/model.Station"
                },
                "duration": {
                    "type": "string"
                },
                "enddate": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "startdate": {
                    "type": "string"
                },
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ItineraryStep"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.ItineraryStep": {
            "type": "object",
            "properties": {
                "arrival": {
                    "type": "string"
                },
                "departure": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "enddate": {
                    "type": "string"
                },
                "startdate": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.Location": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            }
        },
        "model.LoginFailureCredentials": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "incorrect/missing email or password"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "yoimiya.naganohara@gmail.com"
                },
                "password": {
                    "type": "string",
                    "example": "12345678"
                }
            }
        },
        "model.LoginSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Login successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.LogoutSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Logout successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.OpeningHours": {
            "type": "object",
            "properties": {
                "open_now": {
                    "type": "boolean"
                }
            }
        },
        "model.Photos": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "html_attributions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "photo_reference": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "model.PlusCode": {
            "type": "object",
            "properties": {
                "compound_code": {
                    "type": "string"
                },
                "global_code": {
                    "type": "string"
                }
            }
        },
        "model.RefreshSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Token refreshed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "yoimiya.naganohara@gmail.com"
                },
                "firstname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "yoimiya"
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "naganohara"
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 8,
                    "example": "12345678"
                },
                "phone": {
                    "type": "string",
                    "example": "+33612345678"
                }
            }
        },
        "model.RegisterSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "User created successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.Roadtrip": {
            "type": "object",
            "properties": {
                "enddate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "startdate": {
                    "type": "string"
                },
                "tripSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TripStep"
                    }
                }
            }
        },
        "model.Sleep": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "vicinity": {
                    "type": "string"
                }
            }
        },
        "model.SleepSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.ActivityResult"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Hotels retrieved successfuly"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.Station": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.TravelSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Itinerary"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Itineraries retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.TripStep": {
            "type": "object",
            "required": [
                "city",
                "enddate",
                "startdate"
            ],
            "properties": {
                "city": {
                    "type": "string"
                },
                "drink": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Drink"
                    }
                },
                "eat": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Eat"
                    }
                },
                "enddate": {
                    "type": "string"
                },
                "enjoy": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Enjoy"
                    }
                },
                "sleep": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Sleep"
                    }
                },
                "startdate": {
                    "type": "string"
                },
                "travel": {
                    "$ref": "#/definitions/model.Itinerary"
                }
            }
        },
        "model.Unauthorized": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "cookie token is empty / Token is expired"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.UpdateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "yoimiya.naganohara@gmail.com"
                },
                "firstname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "yoimiya"
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2,
                    "example": "naganohara"
                },
                "phone": {
                    "type": "string",
                    "example": "+33612345678"
                }
            }
        },
        "model.UpdateUserSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "User updated successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.User": {
            "type": "object",
            "required": [
                "email",
                "firstname",
                "lastname",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "phone": {
                    "type": "string"
                },
                "trips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Roadtrip"
                    }
                }
            }
        },
        "model.UserNotFound": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "user not found"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                },
                "valErrors": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                }
            }
        },
        "model.ValError": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}